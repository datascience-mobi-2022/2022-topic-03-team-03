# Control
HeLa_Ctrl = Raw_data %>% select(contains("Ctrl"))
# RNase
HeLa_RNase = Raw_data %>% select(contains("RNA"))
# Find rows of zeroes
trash <- c(which(rowMeans(HeLa_Ctrl) == 0),which(rowMeans(HeLa_RNase) == 0))
trash <- trash[-5]
# Remove failed proteins
HeLa_cleaned <- Raw_data[- trash, ]
# Separate data sets
# Control
HeLa_Ctrl = HeLa_cleaned %>% select(contains("Ctrl"))
# RNase
HeLa_RNase = HeLa_cleaned %>% select(contains("RNA"))
rm(Raw_data)
# Create functions for fraction-wise normalization
# 1. Create function that calculates the sum of the colums for each fraction for all three replicates
Spalten_Norm <- function(x){
ColSumme = colSums(x)
maxcolsums = c()
k = 3
for (i in 1:(ncol(x)/3)) {
a = ColSumme[[k*i]]
b = ColSumme[[k*i-1]]
c = ColSumme[[k*i-2]]
maxcolsums = c(maxcolsums, max(a,b,c))
}
return(ColSumme)
}
# 2. Create function that selects the maxcolsum for each fraction out of all three replicates
Spalten_Norm_1 <- function(x){
ColSumme = colSums(x)
maxcolsums = c()
k = 3
for (i in 1:(ncol(x)/3)) {
a = ColSumme[[k*i]]
b = ColSumme[[k*i-1]]
c = ColSumme[[k*i-2]]
maxcolsums = c(maxcolsums, max(a,b,c))
}
return(maxcolsums)
}
# 3. Create function that calculates the quotient of maxcolsum and colsum
Spalten_Norm_2 <- function(x, ColSumme, maxcolsums){
Quotient = c()
k = 3
for (i in 1:(ncol(x)/3)){
Quotient = c(Quotient, maxcolsums[i]/ColSumme[[k*i-2]])
Quotient = c(Quotient, maxcolsums[i]/ColSumme[[k*i-1]])
Quotient = c(Quotient, maxcolsums[i]/ColSumme[[k*i]])
}
return(Quotient)
}
# Apply created functions on our data set to calculate the normalized protein values per fraction and replicate
ColSumme<- Spalten_Norm(HeLa_cleaned)
maxcolsums <- Spalten_Norm_1(HeLa_cleaned)
Quotient <- Spalten_Norm_2(HeLa_cleaned, ColSumme, maxcolsums)
Hela_Col_Norm <- sweep(HeLa_cleaned, 2, Quotient, "*")
rm(Spalten_Norm, Spalten_Norm_1, Spalten_Norm_2)
rm(ColSumme, maxcolsums, Quotient)
# Sort data set to select replicates
# Control
HeLa_Ctrl_colnorm = Hela_Col_Norm %>% select(contains("Ctrl"))
HeLa_Ctrl1 = HeLa_Ctrl_colnorm %>% select(contains("Rep1"))
HeLa_Ctrl2 = HeLa_Ctrl_colnorm %>% select(contains("Rep2"))
HeLa_Ctrl3 = HeLa_Ctrl_colnorm %>% select(contains("Rep3"))
# RNase
HeLa_RNase_colnorm = Hela_Col_Norm %>% select(contains("RNA"))
HeLa_RNase1 = HeLa_RNase_colnorm %>% select(contains("Rep1"))
HeLa_RNase2 = HeLa_RNase_colnorm %>% select(contains("Rep2"))
HeLa_RNase3 = HeLa_RNase_colnorm %>% select(contains("Rep3"))
# Creating function that scales the protein amount in each replicate per fraction to 100
rowPercent <- function(dataframe){
dt <- dataframe
lastrow <- dim(dataframe)[1]
for(i in 1:lastrow){
RowSum <- rowSums (dataframe[i,])
if (RowSum == 0) {dt[i,] <- 0}
else dt[i,] <- (dataframe[i,]/RowSum)*100    }
return(dt)}
# Apply the created function
Norm_HeLa_Ctrl1 <- rowPercent(HeLa_Ctrl1)
Norm_HeLa_Ctrl2 <- rowPercent(HeLa_Ctrl2)
Norm_HeLa_Ctrl3 <- rowPercent(HeLa_Ctrl3)
Norm_HeLa_RNase1 <- rowPercent(HeLa_RNase1)
Norm_HeLa_RNase2 <- rowPercent(HeLa_RNase2)
Norm_HeLa_RNase3 <- rowPercent(HeLa_RNase3)
Norm_HeLa <- cbind(Norm_HeLa_Ctrl1, Norm_HeLa_Ctrl2, Norm_HeLa_Ctrl3, Norm_HeLa_RNase1, Norm_HeLa_RNase2, Norm_HeLa_RNase3)
rm(Norm_HeLa_Ctrl1, Norm_HeLa_Ctrl2, Norm_HeLa_Ctrl3, Norm_HeLa_RNase1, Norm_HeLa_RNase2, Norm_HeLa_RNase3)
rm(rowPercent)
#select the fractions
vector <- c(1, 26, 51, 76, 101, 126, 2, 27, 52, 77, 102, 127, 3, 28, 53, 78, 103, 128, 4, 29, 54, 79, 104, 129, 5, 30, 55, 80, 105, 130, 6, 31, 56, 81, 106, 131, 7, 32, 57, 82, 107, 132, 8, 33, 58, 83, 108, 133, 9, 34, 59, 84, 109, 134, 10, 35, 60, 85, 110, 135, 11, 36, 61, 86, 111, 136, 12, 37, 62, 87, 112, 137, 13, 38, 63, 88, 113, 138, 14, 39, 64, 89, 114, 139, 15, 40, 65, 90, 115, 140, 16, 41, 66, 91, 116, 141, 17, 42, 67, 92, 117, 142, 18, 43, 68, 93, 118, 143, 19, 44, 69, 94, 119, 144, 20, 45, 70, 95, 120, 145, 21, 46, 71, 96, 121, 146, 22, 47, 72, 97, 122, 147, 23, 48, 73, 98, 123, 148, 24, 49, 74, 99, 124, 149, 25, 50, 75, 100, 125, 150)
HeLa_Fractions  <- Norm_HeLa[vector]
rm(vector)
# Create list of all separate data frames for the fractions
fractions_names <-  sapply(c(1:50), function(x) {
if (x%%2 == 0)
str_glue("Fraction", (x/2), "_RNase")
else
str_glue("Fraction", ((x+1)/2), "_Ctrl")
})
# Assign the names to the according fractions
for (i in c(1:50)) {
assign(fractions_names[i], HeLa_Fractions[,(3*i-2):(3*i)])
}
# Create function to calculate mean and exclude triplicate values failing one sigma cut-off
mean_sd <- function(x) {
m <- mean(x)
s <- sd(x)
for (i in 1:3)
if (( (m - 1 * s) > x[i]) || ((m + 1 * s) < x[i])) {x[i] <- NA} # NA for outliers
mean(x, na.rm =TRUE) }
# Apply created function to data
mean_Ctrl1 <- apply(Fraction1_Ctrl, 1,mean_sd)
mean_Ctrl2 <- apply(Fraction2_Ctrl, 1,mean_sd )
mean_Ctrl3 <- apply(Fraction3_Ctrl, 1,mean_sd )
mean_Ctrl4 <- apply(Fraction4_Ctrl, 1,mean_sd )
mean_Ctrl5 <- apply(Fraction5_Ctrl, 1,mean_sd)
mean_Ctrl6 <- apply(Fraction6_Ctrl, 1,mean_sd)
mean_Ctrl7 <- apply(Fraction7_Ctrl, 1,mean_sd)
mean_Ctrl8 <- apply(Fraction8_Ctrl, 1,mean_sd)
mean_Ctrl9 <- apply(Fraction9_Ctrl, 1,mean_sd)
mean_Ctrl10 <- apply(Fraction10_Ctrl, 1, mean_sd)
mean_Ctrl11 <- apply(Fraction11_Ctrl, 1,mean_sd)
mean_Ctrl12 <- apply(Fraction12_Ctrl, 1,mean_sd)
mean_Ctrl13 <- apply(Fraction13_Ctrl, 1,mean_sd)
mean_Ctrl14 <- apply(Fraction14_Ctrl, 1,mean_sd)
mean_Ctrl15 <- apply(Fraction15_Ctrl, 1,mean_sd)
mean_Ctrl16 <- apply(Fraction16_Ctrl, 1,mean_sd)
mean_Ctrl17 <- apply(Fraction17_Ctrl, 1,mean_sd)
mean_Ctrl18 <- apply(Fraction18_Ctrl, 1,mean_sd)
mean_Ctrl19 <- apply(Fraction19_Ctrl, 1,mean_sd)
mean_Ctrl20 <- apply(Fraction20_Ctrl, 1,mean_sd)
mean_Ctrl21 <- apply(Fraction21_Ctrl, 1,mean_sd)
mean_Ctrl22 <- apply(Fraction22_Ctrl, 1,mean_sd)
mean_Ctrl23 <- apply(Fraction23_Ctrl, 1,mean_sd)
mean_Ctrl24 <- apply(Fraction24_Ctrl, 1,mean_sd)
mean_Ctrl25 <- apply(Fraction25_Ctrl, 1,mean_sd)
mean_RNase1 <- apply(Fraction1_RNase, 1,mean_sd)
mean_RNase2 <- apply(Fraction2_RNase, 1,mean_sd)
mean_RNase3 <- apply(Fraction3_RNase, 1,mean_sd)
mean_RNase4 <- apply(Fraction4_RNase, 1,mean_sd)
mean_RNase5 <- apply(Fraction5_RNase, 1,mean_sd)
mean_RNase6 <- apply(Fraction6_RNase, 1,mean_sd)
mean_RNase7 <- apply(Fraction7_RNase, 1,mean_sd)
mean_RNase8 <- apply(Fraction8_RNase, 1,mean_sd)
mean_RNase9 <- apply(Fraction9_RNase, 1,mean_sd)
mean_RNase10 <- apply(Fraction10_RNase, 1,mean_sd)
mean_RNase11 <- apply(Fraction11_RNase, 1,mean_sd)
mean_RNase12 <- apply(Fraction12_RNase, 1,mean_sd)
mean_RNase13 <- apply(Fraction13_RNase, 1,mean_sd)
mean_RNase14 <- apply(Fraction14_RNase, 1,mean_sd)
mean_RNase15 <- apply(Fraction15_RNase, 1,mean_sd)
mean_RNase16 <- apply(Fraction16_RNase, 1,mean_sd)
mean_RNase17 <- apply(Fraction17_RNase, 1,mean_sd)
mean_RNase18 <- apply(Fraction18_RNase, 1,mean_sd)
mean_RNase19 <- apply(Fraction19_RNase, 1,mean_sd)
mean_RNase20 <- apply(Fraction20_RNase, 1,mean_sd)
mean_RNase21 <- apply(Fraction21_RNase, 1,mean_sd)
mean_RNase22 <- apply(Fraction22_RNase, 1,mean_sd)
mean_RNase23 <- apply(Fraction23_RNase, 1,mean_sd)
mean_RNase24 <- apply(Fraction24_RNase, 1,mean_sd)
mean_RNase25 <- apply(Fraction25_RNase, 1,mean_sd)
# Create seperate dataframe with mean for ctrl and RNase
mean_HeLa <- data.frame(mean_Ctrl1, mean_RNase1, mean_Ctrl2, mean_RNase2, mean_Ctrl3,mean_RNase3, mean_Ctrl4, mean_RNase4,  mean_Ctrl5, mean_RNase5, mean_Ctrl6, mean_RNase6, mean_Ctrl7, mean_RNase7, mean_Ctrl8, mean_RNase8, mean_Ctrl9, mean_RNase9, mean_Ctrl10, mean_RNase10, mean_Ctrl11, mean_RNase11, mean_Ctrl12, mean_RNase12, mean_Ctrl13, mean_RNase13, mean_Ctrl14, mean_RNase14, mean_Ctrl15, mean_RNase15, mean_Ctrl16, mean_RNase16, mean_Ctrl17, mean_RNase17, mean_Ctrl18, mean_RNase18, mean_Ctrl19, mean_RNase19, mean_Ctrl20, mean_RNase20, mean_Ctrl21, mean_RNase21, mean_Ctrl22, mean_RNase22, mean_Ctrl23, mean_RNase23, mean_Ctrl24, mean_RNase24, mean_Ctrl25, mean_RNase25)
rm(mean_Ctrl1, mean_RNase1, mean_Ctrl2, mean_RNase2, mean_Ctrl3,mean_RNase3, mean_Ctrl4, mean_RNase4,  mean_Ctrl5, mean_RNase5, mean_Ctrl6, mean_RNase6, mean_Ctrl7, mean_RNase7, mean_Ctrl8, mean_RNase8, mean_Ctrl9, mean_RNase9, mean_Ctrl10, mean_RNase10, mean_Ctrl11, mean_RNase11, mean_Ctrl12, mean_RNase12, mean_Ctrl13, mean_RNase13, mean_Ctrl14, mean_RNase14, mean_Ctrl15, mean_RNase15, mean_Ctrl16, mean_RNase16, mean_Ctrl17, mean_RNase17, mean_Ctrl18, mean_RNase18, mean_Ctrl19, mean_RNase19, mean_Ctrl20, mean_RNase20, mean_Ctrl21, mean_RNase21, mean_Ctrl22, mean_RNase22, mean_Ctrl23, mean_RNase23, mean_Ctrl24, mean_RNase24, mean_Ctrl25, mean_RNase25)
HeLa_Ctrl_mean = mean_HeLa %>% select(contains("Ctrl"))
HeLa_RNase_mean = mean_HeLa %>% select(contains("RNA"))
# Function to test how many values fail one sigma cut-off
mean_sd_na <- function(x) {
m <- mean(x)
s <- sd(x)
for (i in 1:3)
if (( (m - 1 * s) > x[i]) || ((m + 1 * s) < x[i])) {x[i] <- 1}
else (x[i] <- 0)
sum(x)
}
# Select values outside of one sigma cut-off
na_mean_Ctrl1 <- apply(Fraction1_Ctrl, 1,mean_sd_na)
na_mean_Ctrl2 <- apply(Fraction2_Ctrl, 1,mean_sd_na )
na_mean_Ctrl3 <- apply(Fraction3_Ctrl, 1,mean_sd_na )
na_mean_Ctrl4 <- apply(Fraction4_Ctrl, 1,mean_sd_na )
na_mean_Ctrl5 <- apply(Fraction5_Ctrl, 1,mean_sd_na)
na_mean_Ctrl6 <- apply(Fraction6_Ctrl, 1,mean_sd_na)
na_mean_Ctrl7 <- apply(Fraction7_Ctrl, 1,mean_sd_na)
na_mean_Ctrl8 <- apply(Fraction8_Ctrl, 1,mean_sd_na)
na_mean_Ctrl9 <- apply(Fraction9_Ctrl, 1,mean_sd_na)
na_mean_Ctrl10 <- apply(Fraction10_Ctrl, 1, mean_sd_na)
na_mean_Ctrl11 <- apply(Fraction11_Ctrl, 1,mean_sd_na)
na_mean_Ctrl12 <- apply(Fraction12_Ctrl, 1,mean_sd_na)
na_mean_Ctrl13 <- apply(Fraction13_Ctrl, 1,mean_sd_na)
na_mean_Ctrl14 <- apply(Fraction14_Ctrl, 1,mean_sd_na)
na_mean_Ctrl15 <- apply(Fraction15_Ctrl, 1,mean_sd_na)
na_mean_Ctrl16 <- apply(Fraction16_Ctrl, 1,mean_sd_na)
na_mean_Ctrl17 <- apply(Fraction17_Ctrl, 1,mean_sd_na)
na_mean_Ctrl18 <- apply(Fraction18_Ctrl, 1,mean_sd_na)
na_mean_Ctrl19 <- apply(Fraction19_Ctrl, 1,mean_sd_na)
na_mean_Ctrl20 <- apply(Fraction20_Ctrl, 1,mean_sd_na)
na_mean_Ctrl21 <- apply(Fraction21_Ctrl, 1,mean_sd_na)
na_mean_Ctrl22 <- apply(Fraction22_Ctrl, 1,mean_sd_na)
na_mean_Ctrl23 <- apply(Fraction23_Ctrl, 1,mean_sd_na)
na_mean_Ctrl24 <- apply(Fraction24_Ctrl, 1,mean_sd_na)
na_mean_Ctrl25 <- apply(Fraction25_Ctrl, 1,mean_sd_na)
na_mean_RNase1 <- apply(Fraction1_RNase, 1,mean_sd_na)
na_mean_RNase2 <- apply(Fraction2_RNase, 1,mean_sd_na)
na_mean_RNase3 <- apply(Fraction3_RNase, 1,mean_sd_na)
na_mean_RNase4 <- apply(Fraction4_RNase, 1,mean_sd_na)
na_mean_RNase5 <- apply(Fraction5_RNase, 1,mean_sd_na)
na_mean_RNase6 <- apply(Fraction6_RNase, 1,mean_sd_na)
na_mean_RNase7 <- apply(Fraction7_RNase, 1,mean_sd_na)
na_mean_RNase8 <- apply(Fraction8_RNase, 1,mean_sd_na)
na_mean_RNase9 <- apply(Fraction9_RNase, 1,mean_sd_na)
na_mean_RNase10 <- apply(Fraction10_RNase, 1,mean_sd_na)
na_mean_RNase11 <- apply(Fraction11_RNase, 1,mean_sd_na)
na_mean_RNase12 <- apply(Fraction12_RNase, 1,mean_sd_na)
na_mean_RNase13 <- apply(Fraction13_RNase, 1,mean_sd_na)
na_mean_RNase14 <- apply(Fraction14_RNase, 1,mean_sd_na)
na_mean_RNase15 <- apply(Fraction15_RNase, 1,mean_sd_na)
na_mean_RNase16 <- apply(Fraction16_RNase, 1,mean_sd_na)
na_mean_RNase17 <- apply(Fraction17_RNase, 1,mean_sd_na)
na_mean_RNase18 <- apply(Fraction18_RNase, 1,mean_sd_na)
na_mean_RNase19 <- apply(Fraction19_RNase, 1,mean_sd_na)
na_mean_RNase20 <- apply(Fraction20_RNase, 1,mean_sd_na)
na_mean_RNase21 <- apply(Fraction21_RNase, 1,mean_sd_na)
na_mean_RNase22 <- apply(Fraction22_RNase, 1,mean_sd_na)
na_mean_RNase23 <- apply(Fraction23_RNase, 1,mean_sd_na)
na_mean_RNase24 <- apply(Fraction24_RNase, 1,mean_sd_na)
na_mean_RNase25 <- apply(Fraction25_RNase, 1,mean_sd_na)
# Data frame with filtered out values
mean_HeLa_na <- data.frame (na_mean_Ctrl1, na_mean_RNase1, na_mean_Ctrl2, na_mean_RNase2, na_mean_Ctrl3,na_mean_RNase3, na_mean_Ctrl4, na_mean_RNase4,  na_mean_Ctrl5, na_mean_RNase5, na_mean_Ctrl6, na_mean_RNase6, na_mean_Ctrl7, na_mean_RNase7, na_mean_Ctrl8, na_mean_RNase8, na_mean_Ctrl9, na_mean_RNase9, na_mean_Ctrl10, na_mean_RNase10, na_mean_Ctrl11, na_mean_RNase11, na_mean_Ctrl12, na_mean_RNase12, na_mean_Ctrl13, na_mean_RNase13, na_mean_Ctrl14, na_mean_RNase14, na_mean_Ctrl15, na_mean_RNase15, na_mean_Ctrl16, na_mean_RNase16, na_mean_Ctrl17, na_mean_RNase17, na_mean_Ctrl18, na_mean_RNase18, na_mean_Ctrl19, na_mean_RNase19, na_mean_Ctrl20, na_mean_RNase20, na_mean_Ctrl21, na_mean_RNase21, na_mean_Ctrl22, na_mean_RNase22, na_mean_Ctrl23, na_mean_RNase23, na_mean_Ctrl24, na_mean_RNase24, na_mean_Ctrl25, na_mean_RNase25)
# Check how many values are removed
which(mean_HeLa_na == 3) # Three out of three values removed
which(mean_HeLa_na == 2) # Two out of three values removed
sum(mean_HeLa_na) # One out of three values removed
rm(na_mean_Ctrl1, na_mean_RNase1, na_mean_Ctrl2, na_mean_RNase2, na_mean_Ctrl3,na_mean_RNase3, na_mean_Ctrl4, na_mean_RNase4,  na_mean_Ctrl5, na_mean_RNase5, na_mean_Ctrl6, na_mean_RNase6, na_mean_Ctrl7, na_mean_RNase7, na_mean_Ctrl8, na_mean_RNase8, na_mean_Ctrl9, na_mean_RNase9, na_mean_Ctrl10, na_mean_RNase10, na_mean_Ctrl11, na_mean_RNase11, na_mean_Ctrl12, na_mean_RNase12, na_mean_Ctrl13, na_mean_RNase13, na_mean_Ctrl14, na_mean_RNase14, na_mean_Ctrl15, na_mean_RNase15, na_mean_Ctrl16, na_mean_RNase16, na_mean_Ctrl17, na_mean_RNase17, na_mean_Ctrl18, na_mean_RNase18, na_mean_Ctrl19, na_mean_RNase19, na_mean_Ctrl20, na_mean_RNase20, na_mean_Ctrl21, na_mean_RNase21, na_mean_Ctrl22, na_mean_RNase22, na_mean_Ctrl23, na_mean_RNase23, na_mean_Ctrl24, na_mean_RNase24, na_mean_Ctrl25, na_mean_RNase25)
proteinnames <- rownames(mean_HeLa)
fraction_index <- c(1:25)
# Repeat the following code block for the six test proteins ctrl vs RNase and pre vs post normalization
# Function to create comparison plots
compare_pre_post <- function(protein, y_limit_pre, y_limit_post) {
par(mfrow = c(1,2))
plot(fraction_index, HeLa_Ctrl1[protein,], type = 'l', col = 'forestgreen', # Control pre
xlab = "Fractions",
ylab = "Protein amount [arbitrary unit]",
ylim = c(0,y_limit_pre),
main = paste(protein, "pre-normalization"))
lines(x = fraction_index, y = HeLa_RNase1[protein,], type = 'l', col = 'firebrick2') # RNase pre
legend(x = "topright",                      # Position
legend = c("ctrl", "RNase"),           # Legend texts
col = c('darkgreen', 'red'),           # Line colors
lwd = 2)                               # Line width
plot(fraction_index, HeLa_Ctrl_mean[protein,], type = 'l', col = 'forestgreen', # Control post
xlab = "Fractions",
ylab = "Protein amount [%]",
ylim = c(0,y_limit_post),
main = paste(protein, "post-normalization"))
lines(x = fraction_index, y = HeLa_RNase_mean[protein,], type = 'l', col = 'firebrick2') # RNase post
legend(x = "topright",
legend = c("ctrl", "RNase"),
col = c('darkgreen', 'red'),
lwd = 2)
}
# Apply function to our selected proteins
# Shifters
compare_pre_post("SIN3A_HUMAN", 4000000, 25) #SIN3A
compare_pre_post("HDAC1_HUMAN", 7500000, 25) #HDAC1
compare_pre_post("HDAC2_HUMAN", 7500000, 25) #HDAC2
compare_pre_post("RFC2_HUMAN", 3500000, 35) #RFC2
# Non-Shifters
compare_pre_post("ASNS_HUMAN", 2500000, 40) #ASNS
compare_pre_post("MCM2_HUMAN", 18000000, 25) #MCM2
compare_pre_post("MCM3_HUMAN", 25000000, 25) #MCM3
# Define Shapiro test function
shapiro_testing <- function(x) {
if (diff(range(x)) == 0)
list()
else shapiro.test(x)
}
# Define function to apply shapiro testing to list of names for all fractions
shapiro_on_name_list <- function(list) {
mean = c()
for (i in 1:length(list)) {
df = get(list[i])
list_results <- apply(df, 1, shapiro_testing)
p_values <- unlist(lapply(list_results, function(x) {x$p.value}))
# print p mean value for each fraction
mean = c(mean, mean(p_values))
}
mean
}
# Apply testing to data and test if all values are greater than 5 %
shapiro_values_greater_0.05 <- shapiro_on_name_list(fractions_names) > 0.05
# Remove excess variables
rm(Fraction1_Ctrl, Fraction1_RNase, Fraction2_Ctrl, Fraction2_RNase, Fraction3_Ctrl, Fraction3_RNase, Fraction4_Ctrl, Fraction4_RNase, Fraction5_Ctrl, Fraction5_RNase, Fraction6_Ctrl, Fraction6_RNase, Fraction7_Ctrl, Fraction7_RNase, Fraction8_Ctrl, Fraction8_RNase, Fraction9_Ctrl, Fraction9_RNase, Fraction10_Ctrl, Fraction10_RNase, Fraction11_Ctrl, Fraction11_RNase, Fraction12_Ctrl, Fraction12_RNase, Fraction13_Ctrl, Fraction13_RNase, Fraction14_Ctrl, Fraction14_RNase, Fraction15_Ctrl, Fraction15_RNase, Fraction16_Ctrl, Fraction16_RNase, Fraction17_Ctrl, Fraction17_RNase, Fraction18_Ctrl, Fraction18_RNase, Fraction19_Ctrl, Fraction19_RNase, Fraction20_Ctrl, Fraction20_RNase, Fraction21_Ctrl, Fraction21_RNase, Fraction22_Ctrl, Fraction22_RNase, Fraction23_Ctrl, Fraction23_RNase, Fraction24_Ctrl, Fraction24_RNase, Fraction25_Ctrl, Fraction25_RNase)
rm(fractions_names_Ctrl_, fractions_names_RNase,i)
# Creating a function that selects all maxima through comparing each value per protein and fraction with two neighboring values
find_peaks <- function (x, m = 2){
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), FUN = function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)
pks
if ( sum(x[1]>x[2:(m+1)]) == 2 ) {pks <- c(pks, 1)}
if ( sum(x[25]>x[24:(25-m)]) == 2 ) {pks <- c(pks, 25)}
pks <- unlist(pks)
pks
}
# Selecting the global maxima for each protein and condition
absolute_max_ctrl <- apply(HeLa_Ctrl_mean, 1, max)
absolute_max_RNase <- apply(HeLa_RNase_mean, 1, max)
# Finding fraction were global maximum is located
fracs_ctrl <- max.col(HeLa_Ctrl_mean)
fracs_RNase <- max.col(HeLa_RNase_mean)
# Creating data frame with global maximum value and fraction per protein and condition
abs_max_both <- data.frame(absolute_max_ctrl, fracs_ctrl, absolute_max_RNase, fracs_RNase)
# Creating for-loop that substracts fraction of global maxima for ctrl and RNase for each protein
i <- c(1:7081)
x_shifts <- c()
for(x in i){x_shifts[x] <- fracs_ctrl[x] - fracs_RNase[x]
}
# Adding those values to existing data frame
abs_max_both$x_shifts <- x_shifts
# Creating for-loop that calculates the difference of the global maxima fractions for ctrl and RNase for each protein
i <- c(1:7081)
y_shifts <- c()
for(x in i){y_shifts[x] <- absolute_max_ctrl[x] - absolute_max_RNase[x]
}
# Creating for-loop that calculates the difference of the fraction of the global maxima ctrl and fraction values of RNase for each protein
i <- c(1:7081)
y_shifts2 <- c()
for(x in i){y_shifts2[x] <- absolute_max_ctrl[x] - HeLa_RNase_mean[x,fracs_ctrl[x]]
}
# Adding those values to existing data frame
abs_max_both$y_shifts <- y_shifts
abs_max_both$y_shifts2 <- y_shifts2
# Defining x-shift directions
no_shift <- which(abs_max_both$x_shifts == 0)
left_shift <- which(abs_max_both$x_shifts > 0)
right_shift <- which(abs_max_both$x_shifts < 0)
# Creating for-loop to apply definitions for x-shift
i <- c(1:7081)
shift_direction <- c()
for(x in i){shift_direction[x] <- if(abs_max_both$x_shifts[x]==0) {'no shift'}
else if(abs_max_both$x_shifts[x] < 0) {'right shift'}
else {'left shift'}
}
# Adding x-shift direction to existing data frame
abs_max_both$shift_direction <- shift_direction
rm(absolute_max_ctrl, fracs_ctrl, absolute_max_RNase, fracs_RNase,peaks_ctrl_25,peaks_RNase_25,rel_peaks_ctrl,rel_peaks_RNase, max_frac_ctrl, i)
HeLa_Ctrl_Norm <- Norm_HeLa %>% select(contains("Ctrl"))
HeLa_RNase_Norm <- Norm_HeLa %>% select(contains("RNA"))
# Selecting every single protein (row)
F_test_p_values = c()
for (i in 1:nrow(HeLa_Ctrl_Norm)) {
x <- as.numeric(HeLa_Ctrl_Norm[i,])
y <- as.numeric(HeLa_RNase_Norm[i,])
# Selecting triplet values for each fraction
for (k in 1:25) {
result <- var.test(x[c(k, (25+k), (50+k))], y[c(k, (25+k), (50+k))], alternative = "two.sided")
new_p_value <- result$p.value
# save p-value for every protein comparing ctrl vs RNase
F_test_p_values <-  c(F_test_p_values, new_p_value)
}
}
# Testing if automation works
k = 1 # Testing for row 1 with fraction k = 1
HeLa_Ctrl_Norm[1, c(k, (25+k), (50+k))]
HeLa_RNase_Norm[1, c(k, (25+k), (50+k))]
F_test_p_values[1]
var.test(as.numeric(HeLa_Ctrl_Norm[1, c(1, (25+k), (50+k))]), as.numeric(HeLa_RNase_Norm[1,c(1, (25+k), (50+k))]), alternative = "two.sided")
# Creating p-values matrix
p_value_matrix <- matrix(data = F_test_p_values, byrow = TRUE, ncol = 25)
col_names_p <-  sapply(c(1:25), function(x) {
str_glue(x)
})
# Creating data frame
p_value_df <- data.frame(p_value_matrix)
rownames(p_value_df) <-  row.names(HeLa_Ctrl_Norm)
colnames(p_value_df) <-  col_names_p
# Cecking ctrl maxima for p-value
F_max_ctrl <- c()
for (i in 1:nrow(p_value_df)) {
boolian <- p_value_df[i, abs_max_both$fracs_ctrl[i]] > 0.01
F_max_ctrl <- c(F_max_ctrl, boolian)
}
# For RNase maxima
F_max_RNase <- c()
for (i in 1:nrow(p_value_df)) {
boolian <- p_value_df[i, abs_max_both$fracs_RNase[i]] > 0.01
F_max_RNase <- c(F_max_RNase, boolian)
}
list_F_max_RNase <- F_max_RNase
# Excluding proteins with FALSE or NaN/NA F-test results from further analysis
# Selecting FALSE proteins
F_FALSE_ctrl <- abs_max_both[which(F_max_ctrl_1 == FALSE), ]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(corrplot)
library(cluster)
library(factoextra)
library(ggpubr)
library(readxl)
library(FactoMineR)
library(ggplot2)
Raw_data <- read.csv("https://raw.githubusercontent.com/datascience-mobi-2022/2022-topic-03-team-03/3a0f2d9583b56a1cd22150b399d61352d6f7b0e1/RDeeP_HeLa_Interphase.csv", header=TRUE, row.names=1, sep = ";")
HS_RBPs <- read.csv("https://raw.githubusercontent.com/datascience-mobi-2022/2022-topic-03-team-03/main/1_HS_RBPs.csv", header=TRUE, sep = ",")
HS_non_RBPs <- read.csv("https://raw.githubusercontent.com/datascience-mobi-2022/2022-topic-03-team-03/main/2_HS_non_RBPs.csv", header=TRUE, sep = ",")
# Control
HeLa_Ctrl = Raw_data %>% select(contains("Ctrl"))
# RNase
HeLa_RNase = Raw_data %>% select(contains("RNA"))
# Find rows of zeroes
trash <- c(which(rowMeans(HeLa_Ctrl) == 0),which(rowMeans(HeLa_RNase) == 0))
trash <- trash[-5]
# Remove failed proteins
HeLa_cleaned <- Raw_data[- trash, ]
# Separate data sets
# Control
HeLa_Ctrl = HeLa_cleaned %>% select(contains("Ctrl"))
# RNase
HeLa_RNase = HeLa_cleaned %>% select(contains("RNA"))
rm(Raw_data)
# Create functions for fraction-wise normalization
# 1. Create function that calculates the sum of the colums for each fraction for all three replicates
Spalten_Norm <- function(x){
ColSumme = colSums(x)
maxcolsums = c()
k = 3
for (i in 1:(ncol(x)/3)) {
a = ColSumme[[k*i]]
b = ColSumme[[k*i-1]]
c = ColSumme[[k*i-2]]
maxcolsums = c(maxcolsums, max(a,b,c))
}
return(ColSumme)
}
# 2. Create function that selects the maxcolsum for each fraction out of all three replicates
Spalten_Norm_1 <- function(x){
ColSumme = colSums(x)
maxcolsums = c()
k = 3
for (i in 1:(ncol(x)/3)) {
a = ColSumme[[k*i]]
b = ColSumme[[k*i-1]]
c = ColSumme[[k*i-2]]
maxcolsums = c(maxcolsums, max(a,b,c))
}
return(maxcolsums)
}
# 3. Create function that calculates the quotient of maxcolsum and colsum
Spalten_Norm_2 <- function(x, ColSumme, maxcolsums){
Quotient = c()
k = 3
for (i in 1:(ncol(x)/3)){
Quotient = c(Quotient, maxcolsums[i]/ColSumme[[k*i-2]])
Quotient = c(Quotient, maxcolsums[i]/ColSumme[[k*i-1]])
Quotient = c(Quotient, maxcolsums[i]/ColSumme[[k*i]])
}
return(Quotient)
}
# Apply created functions on our data set to calculate the normalized protein values per fraction and replicate
ColSumme<- Spalten_Norm(HeLa_cleaned)
maxcolsums <- Spalten_Norm_1(HeLa_cleaned)
Quotient <- Spalten_Norm_2(HeLa_cleaned, ColSumme, maxcolsums)
Hela_Col_Norm <- sweep(HeLa_cleaned, 2, Quotient, "*")
rm(Spalten_Norm, Spalten_Norm_1, Spalten_Norm_2)
rm(ColSumme, maxcolsums, Quotient)
# Sort data set to select replicates
# Control
HeLa_Ctrl_colnorm = Hela_Col_Norm %>% select(contains("Ctrl"))
HeLa_Ctrl1 = HeLa_Ctrl_colnorm %>% select(contains("Rep1"))
HeLa_Ctrl2 = HeLa_Ctrl_colnorm %>% select(contains("Rep2"))
HeLa_Ctrl3 = HeLa_Ctrl_colnorm %>% select(contains("Rep3"))
# RNase
HeLa_RNase_colnorm = Hela_Col_Norm %>% select(contains("RNA"))
HeLa_RNase1 = HeLa_RNase_colnorm %>% select(contains("Rep1"))
HeLa_RNase2 = HeLa_RNase_colnorm %>% select(contains("Rep2"))
HeLa_RNase3 = HeLa_RNase_colnorm %>% select(contains("Rep3"))
# Creating function that scales the protein amount in each replicate per fraction to 100
rowPercent <- function(dataframe){
dt <- dataframe
lastrow <- dim(dataframe)[1]
for(i in 1:lastrow){
RowSum <- rowSums (dataframe[i,])
if (RowSum == 0) {dt[i,] <- 0}
else dt[i,] <- (dataframe[i,]/RowSum)*100    }
return(dt)}
# Apply the created function
Norm_HeLa_Ctrl1 <- rowPercent(HeLa_Ctrl1)
Norm_HeLa_Ctrl2 <- rowPercent(HeLa_Ctrl2)
Norm_HeLa_Ctrl3 <- rowPercent(HeLa_Ctrl3)
HeLa_Ctrl_Norm <- Norm_HeLa %>% select(contains("Ctrl"))
HeLa_RNase_Norm <- Norm_HeLa %>% select(contains("RNA"))
# Selecting every single protein (row)
F_test_p_values = c()
for (i in 1:nrow(HeLa_Ctrl_Norm)) {
x <- as.numeric(HeLa_Ctrl_Norm[i,])
y <- as.numeric(HeLa_RNase_Norm[i,])
# Selecting triplet values for each fraction
for (k in 1:25) {
result <- var.test(x[c(k, (25+k), (50+k))], y[c(k, (25+k), (50+k))], alternative = "two.sided")
new_p_value <- result$p.value
# save p-value for every protein comparing ctrl vs RNase
F_test_p_values <-  c(F_test_p_values, new_p_value)
}
}
