for(x in i){shift_direction[x] <- if(abs_max_both$x_shifts[x]==0) {'no shift'}
else if(abs_max_both$x_shifts[x] < 0) {'right shift'}
else {'left shift'}
}
abs_max_both$shift_direction <- shift_direction
max_frac_ctrl <- c(abs_max_both$fracs_ctrl)
i <- c(1:7081)
y_shifts2 <- c()
for(x in i){y_shifts2[x] <- absolute_max_ctrl[x] - HeLa_RNAse_mean[x,fracs_ctrl[x]]
}
abs_max_both$y_shifts2 <- y_shifts2
rm(absolute_max_ctrl, fracs_ctrl, absolute_max_RNAse, fracs_RNAse,peaks_ctrl_25,peaks_RNAse_25,rel_peaks_ctrl,rel_peaks_RNAse, max_frac_ctrl, i)
# WENN die Werte Normalverteilt sind und wir das einfach nur aufgrund der Normalisierung nicht sehen: a) Erst F-Test um die Varianzen zu vergleichen b) Unpaired T-Test weil wir zwar eine einheitliche Grundgesamtheit haben aber diese unterschiedlich behandelt haben. Muss da mal Niklas fragen.
#Beispiel mit Fe-Werten von Mäusen aus meiner Ausbildung die wir damals händisch gerechnet haben.
Fe_before <- c(13.6, 13.0, 13.7, 13.9, 13.4)
Fe_after <- c(12.0, 12.3, 13.1, 12.5, 13.0)
Fe_ttest <- t.test(Fe_before, Fe_after, var.equal = TRUE) #Unpired
Fe_ttest
#Wir sehen der p-value ist 0.006618 und damit kleiner als die Signifikanzgrenze (a) bei Konfidenzintervall 95 % a = 0.05 dementsprechend ist es signifikant.
# Man kann auch argumentieren, dass die Werte gepaart sind Vor-Treatment und nach Treatment. So habe ich in der Ausbildung gerechnet.
Fe_test_paired <- t.test(Fe_before, Fe_after, paired = TRUE)
Fe_test_paired
#Wilcoxon Test for paired samples if not normally ditributed was bei unseren Daten sehr wahrscheinlich der Fall sein wird.
rm(Fe_after, Fe_before, Fe_test_paired, Fe_ttest)
x <- c(rnorm(10, 0, 1))
y <- c(rnorm(10, 0, 1))
var.test(x, y, alternative = "two.sided")
HeLa_Ctrl_Norm <- Norm_HeLa %>% select(contains("Ctrl"))
HeLa_RNAse_Norm <- Norm_HeLa %>% select(contains("RNA"))
# Selecting every single protein (row)
F_test_p_values = c()
for (i in 1:nrow(HeLa_Ctrl_Norm)) {
x <- as.numeric(HeLa_Ctrl_Norm[i,])
y <- as.numeric(HeLa_RNAse_Norm[i,])
# Selecting triplet values for each fraction
for (k in 1:25) {
result <- var.test(x[c(k, (25+k), (50+k))], y[c(k, (25+k), (50+k))], alternative = "two.sided")
new_p_value <- result$p.value
# save p-value for every protein comparing ctrl vs RNase
F_test_p_values <-  c(F_test_p_values, new_p_value)
}
}
# Testing if automation works
k = 1 # Testing for row 1 with fraction k = 1
HeLa_Ctrl_Norm[1, c(k, (25+k), (50+k))]
HeLa_RNAse_Norm[1, c(k, (25+k), (50+k))]
F_test_p_values[1]
var.test(as.numeric(HeLa_Ctrl_Norm[1, c(1, (25+k), (50+k))]), as.numeric(HeLa_RNAse_Norm[1,c(1, (25+k), (50+k))]), alternative = "two.sided")
list_F_test_p_values_05 <- F_test_p_values > 0.05
k = 21
F_test_p_values[21]
var.test(as.numeric(HeLa_Ctrl_Norm[1,c(k, (25+k), (50+k))]), as.numeric(HeLa_RNAse_Norm[1,c(k, (25+k), (50+k))]), alternative = "two.sided")
# Checking on a NaN result
HeLa_Ctrl_Norm[1,c(k, (25+k), (50+k))]
HeLa_RNAse_Norm[1,c(k, (25+k), (50+k))]
k = 3
F_test_p_values[3]
var.test(as.numeric(HeLa_Ctrl_Norm[1,c(k, (25+k), (50+k))]), as.numeric(HeLa_RNAse_Norm[1,c(k, (25+k), (50+k))]), alternative = "two.sided")
# Checking on FALSE result
HeLa_Ctrl_Norm[1,c(k, (25+k), (50+k))]
HeLa_RNAse_Norm[1,c(k, (25+k), (50+k))]
p_value_matrix <- matrix(data = F_test_p_values, byrow = TRUE, ncol = 25)
col_names_p <-  sapply(c(1:25), function(x) {
str_glue(x)
})
p_value_df <- data.frame(p_value_matrix)
rownames(p_value_df) <-  row.names(HeLa_Ctrl_Norm)
colnames(p_value_df) <-  col_names_p
# For ctrl maxima
F_max_ctrl <- c()
for (i in 1:nrow(p_value_df)) {
boolian <- p_value_df[i, abs_max_both$fracs_ctrl[i]] > 0.05
F_max_ctrl <- c(F_max_ctrl, boolian)
}
# For RNase maxima
F_max_RNase <- c()
for (i in 1:nrow(p_value_df)) {
boolian <- p_value_df[i, abs_max_both$fracs_RNAse[i]] > 0.05
F_max_RNase <- c(F_max_RNase, boolian)
}
list_F_max_RNAse <- F_max_RNase
k <- abs_max_both$fracs_RNAse[8]
# P value
p_value_df[8, abs_max_both$fracs_RNAse[8]]
var.test(as.numeric(HeLa_Ctrl_Norm[8, c(k, (25+k), (50+k))]), as.numeric(HeLa_RNAse_Norm[8, c(k, (25+k), (50+k))]), alternative = "two.sided")
# Measured protein content
HeLa_Ctrl_Norm[8, c(k, (25+k), (50+k))]
HeLa_RNAse_Norm[8, c(k, (25+k), (50+k))]
# Visually
compare_pre_post(row.names(HeLa_Ctrl_Norm[8,]), 2000000, 110) # Protein row 8
# Shift?
abs_max_both$shifts[8]
k <- abs_max_both$fracs_RNAse[41]
# P value
p_value_df[41, abs_max_both$fracs_RNAse[41]]
var.test(as.numeric(HeLa_Ctrl_Norm[41, c(k, (25+k), (50+k))]), as.numeric(HeLa_RNAse_Norm[41, c(k, (25+k), (50+k))]), alternative = "two.sided")
# Measured protein content
HeLa_Ctrl_Norm[41, c(k, (25+k), (50+k))]
HeLa_RNAse_Norm[41, c(k, (25+k), (50+k))]
# Visually
compare_pre_post(row.names(HeLa_Ctrl_Norm[41,]), 2000000, 110) # Protein row 41
# Shift?
abs_max_both$shifts[41]
k <- abs_max_both$fracs_RNAse[1]
# P value
p_value_df[1, abs_max_both$fracs_RNAse[1]]
var.test(as.numeric(HeLa_Ctrl_Norm[1, c(k, (25+k), (50+k))]), as.numeric(HeLa_RNAse_Norm[1, c(k, (25+k), (50+k))]), alternative = "two.sided")
# Measured protein content
HeLa_Ctrl_Norm[1, c(k, (25+k), (50+k))]
HeLa_RNAse_Norm[1, c(k, (25+k), (50+k))]
# Visually
compare_pre_post(row.names(HeLa_Ctrl_Norm[1,]), 27000000, 30) # Protein row 1
# Shift?
abs_max_both$shifts[1]
k <- abs_max_both$fracs_RNAse[42]
# P value
p_value_df[42, abs_max_both$fracs_RNAse[42]]
var.test(as.numeric(HeLa_Ctrl_Norm[42, c(k, (25+k), (50+k))]), as.numeric(HeLa_RNAse_Norm[42, c(k, (25+k), (50+k))]), alternative = "two.sided")
# Measured protein content
HeLa_Ctrl_Norm[42, c(k, (25+k), (50+k))]
HeLa_RNAse_Norm[42, c(k, (25+k), (50+k))]
# Visually
compare_pre_post(row.names(HeLa_Ctrl_Norm[42,]), 2500000, 50) # Protein row 42
# Shift?
abs_max_both$shifts[42]
# RNase
table(F_max_RNase)["FALSE"]
table(F_max_RNase)["FALSE"] / nrow(abs_max_both)
# Ctrl
table(F_max_ctrl)["FALSE"]
table(F_max_ctrl)["FALSE"] / nrow(abs_max_both)
# Either RNase or Ctrl
table(F_max_RNase & F_max_ctrl)["FALSE"]
table(F_max_RNase & F_max_ctrl)["FALSE"] / nrow(abs_max_both)
# For ctrl maxima
F_max_ctrl_1 <- c()
for (i in 1:nrow(p_value_df)) {
boolian <- p_value_df[i, abs_max_both$fracs_ctrl[i]] > 0.01
F_max_ctrl_1 <- c(F_max_ctrl_1, boolian)
}
# For RNase maxima
F_max_RNase_1 <- c()
for (i in 1:nrow(p_value_df)) {
boolian <- p_value_df[i, abs_max_both$fracs_RNAse[i]] > 0.01
F_max_RNase_1 <- c(F_max_RNase_1, boolian)
}
# RNase
table(F_max_RNase_1)["FALSE"]
table(F_max_RNase_1)["FALSE"] / nrow(abs_max_both)
# Ctrl
table(F_max_ctrl_1)["FALSE"]
table(F_max_ctrl_1)["FALSE"] / nrow(abs_max_both)
# Either RNase or Ctrl
table(F_max_RNase_1 & F_max_ctrl_1)["FALSE"]
table(F_max_RNase_1 & F_max_ctrl_1)["FALSE"] / nrow(abs_max_both)
# FALSE
F_FALSE_ctrl <- abs_max_both[which(F_max_ctrl_1 == FALSE), ]
F_FALSE_RNase <- abs_max_both[which(F_max_RNase_1 == FALSE), ]
trash_F_FALSE <- unique(c(row.names(F_FALSE_ctrl), row.names(F_FALSE_RNase)))
length(trash_F_FALSE)
# NA
F_NA_ctrl <- abs_max_both[which(is.na(F_max_ctrl_1)), ]
F_NA_RNase <- abs_max_both[which(is.na(F_max_RNase_1)), ]
trash_F_NA <- unique(c(row.names(F_NA_ctrl), row.names(F_NA_RNase)))
length(trash_F_NA)
abs_max_both_F <- abs_max_both[!rownames(abs_max_both) %in% trash_F_FALSE, ]
abs_max_both_F <- abs_max_both[!rownames(abs_max_both) %in% trash_F_NA, ]
dim(abs_max_both_F) #dataset without NA/NaN and FALSE
F_RNase_norm <- HeLa_RNAse_Norm[!rownames(abs_max_both) %in% trash_F_FALSE, ]
F_RNase_norm <- HeLa_RNAse_Norm[!rownames(abs_max_both) %in% trash_F_NA, ]
F_ctrl_norm <- HeLa_Ctrl_Norm[!rownames(abs_max_both) %in% trash_F_FALSE, ]
F_ctrl_norm <- HeLa_Ctrl_Norm[!rownames(abs_max_both) %in% trash_F_NA, ]
#t-test
Fe_before <- c(5.6, 6.0, 6.7, 13.9, 10.4)
Fe_after <- c(20.0, 12.3, 18.1, 17.5, 15.0)
Fe_ttest <- t.test(Fe_before, Fe_after, alternative = "two.sided", var.equal = TRUE) #unpaired
Fe_ttest
rm(Fe_before, Fe_after, Fe_ttest)
t_test_p_values <- c()
# Compare every row (protein) from Ctrl with corresponding RNase
for (i in 1:nrow(F_ctrl_norm)) {
x <- as.numeric(F_ctrl_norm[i,])
y <- as.numeric(F_RNase_norm[i,])
for (k in 1:25) {
result <- t.test(x[c(k, (25+k), (50+k))], y[c(k, (25+k), (50+k))], alternative = "two.sided", var.equal = TRUE) # Comparison in triplets
new_p_value <- result$p.value
# save p-value for every protein comparing ctrl vs RNase
t_test_p_values <-  c(t_test_p_values, new_p_value)
}
}
# Matrix of p-values
p_value_matrix_t <- matrix(data = t_test_p_values, byrow = TRUE, ncol = 25)
col_names_p <-  sapply(c(1:25), function(x) {
str_glue(x)
})
p_value_df_t <- data.frame(p_value_matrix_t)
rownames(p_value_df_t) <-  row.names(F_ctrl_norm)
colnames(p_value_df_t) <-  col_names_p
# For ctrl maxima
t_max_ctrl <- c()
for (i in 1:nrow(p_value_df_t)) {
boolian <- p_value_df_t[i, abs_max_both_F$fracs_ctrl[i]] < 0.05 # Do t-values lay under the 0.05 threshold?
t_max_ctrl <- c(t_max_ctrl, boolian)
}
list_t_max_ctrl <- t_max_ctrl
# For RNase maxima
t_max_RNase <- c()
for (i in 1:nrow(p_value_df_t)) {
boolian <- p_value_df_t[i, abs_max_both_F$fracs_RNAse[i]] < 0.05 # Do t-values lay under the 0.05 threshold?
t_max_RNase <- c(t_max_RNase, boolian)
}
list_t_max_RNAse <- t_max_RNase
# Here just the first three positive results from the t-test
# 1
k = abs_max_both_F$fracs_RNAse[1]
k
p_value_df_t[1, abs_max_both_F$fracs_RNAse[1]]
compare_pre_post(row.names(abs_max_both_F[1,]), 20000000, 30)
F_ctrl_norm[row.names(abs_max_both_F[1,]), c(k, (k+25), (k+50))] # Rep 1 .... Rep 2 ... Rep 3 ....
F_RNase_norm[row.names(abs_max_both_F[1,]), c(k, (k+25), (k+50))]
# 2
k = abs_max_both_F$fracs_RNAse[2]
k
p_value_df_t[2, abs_max_both_F$fracs_RNAse[2]]
compare_pre_post(row.names(abs_max_both_F[2,]), 20000000, 30)
F_ctrl_norm[row.names(abs_max_both_F[2,]), c(k, (k+25), (k+50))]
F_RNase_norm[row.names(abs_max_both_F[2,]), c(k, (k+25), (k+50))]
# 3
k = abs_max_both_F$fracs_RNAse[4]
k
p_value_df_t[3, abs_max_both_F$fracs_RNAse[3]]
compare_pre_post(row.names(abs_max_both_F[3,]), 20000000, 30)
F_ctrl_norm[row.names(abs_max_both_F[3,]), c(k, (k+25), (k+50))]
F_RNase_norm[row.names(abs_max_both_F[3,]), c(k, (k+25), (k+50))]
list_t_max_ctrl[c(1,2,3)]
list_t_max_RNAse[c(1,2,3)]
# RNase
table(t_max_RNase)["TRUE"]
table(t_max_RNase)["TRUE"] / nrow(abs_max_both_F)
# Ctrl
table(t_max_ctrl)["TRUE"]
table(t_max_ctrl)["TRUE"] / nrow(abs_max_both_F)
# Either RNase or Ctrl
table(t_max_RNase & t_max_ctrl)["TRUE"]
table(t_max_RNase & t_max_ctrl)["TRUE"] / nrow(abs_max_both_F)
# NA
t_NA_ctrl <- abs_max_both_F[which(is.na(t_max_ctrl)), ]
t_NA_RNase <- abs_max_both[which(is.na(t_max_RNase)), ]
trash_t_NA <- c(row.names(t_NA_ctrl), row.names(t_NA_RNase))
length(trash_t_NA)
# FALSE
t_FALSE_ctrl <- abs_max_both_F[which(t_max_ctrl == FALSE), ]
t_FALSE_RNase <- abs_max_both_F[which(t_max_RNase == FALSE), ]
trash_t_FALSE <- unique(c(row.names(t_FALSE_ctrl), row.names(t_FALSE_RNase)))
length(trash_t_FALSE)
abs_max_both_t <- abs_max_both[!rownames(abs_max_both_F) %in% trash_t_FALSE, ]
dim(abs_max_both_t) #dataset without FALSE
t_RNase_norm <- F_RNase_norm[!rownames(abs_max_both_F) %in% trash_t_FALSE, ]
t_ctrl_norm <- F_ctrl_norm[!rownames(abs_max_both_F) %in% trash_t_FALSE, ]
trash_t_y0 <- c(rownames(abs_max_both_t[which(abs_max_both_t$y_shifts == 0), ]))
abs_max_both_t_y0 <- abs_max_both_t[!rownames(abs_max_both_t) %in% trash_t_y0, ]
nrow(abs_max_both_t_y0)
# At least 1 or more fractions x shift
trash_no_x_1 <- c(rownames(abs_max_both_t_y0[which(abs(abs_max_both_t_y0$x_shifts) < 2), ]))
abs_max_both_x_y_1 <- abs_max_both_t_y0[!rownames(abs_max_both_t_y0) %in% trash_no_x_1, ]
abs_max_both_x_y_1
nrow(abs_max_both_x_y_1)
# At least 2 or more fractions x shift
trash_no_x_2 <- c(rownames(abs_max_both_t_y0[which(abs(abs_max_both_t_y0$x_shifts) < 3), ]))
abs_max_both_x_y_2 <- abs_max_both_t_y0[!rownames(abs_max_both_t_y0) %in% trash_no_x_2, ]
abs_max_both_x_y_2
nrow(abs_max_both_x_y_2)
# Difference:
row_1 <- c(rownames(abs_max_both_x_y_1))
row_2 <- c(rownames(abs_max_both_x_y_2))
doubles <- row_1 %in% row_2
dif_pos_x_y_1_2 <- which(doubles == FALSE)
dif_names_x_y_1_2 <- row_1[dif_pos_x_y_1_2]
length(dif_names_x_y_1_2)
load("C:\\Daten\\Uni\\4. Fachsemester\\Data Analysis\\HS_RBPs.RData")
load("C:\\Daten\\Uni\\4. Fachsemester\\Data Analysis\\HS_non_RBPs.RData")
# True RBP
Match_RBP_2 <- HS_RBPs$Entry_Name.x %in% row_2
True_RBP_pos_2 <- which(Match_RBP_2 == TRUE)
True_RBP_names_2 <- HS_RBPs$Entry_Name.x[True_RBP_pos_2]
length(True_RBP_names_2)
# False RBP
Match_non_RBP_2 <- HS_non_RBPs$Entry_Name.x %in% row_2
False_RBP_pos_2 <- which(Match_non_RBP_2 == TRUE)
False_RBP_names_2 <- HS_non_RBPs$Entry_Name.x[False_RBP_pos_2]
length(False_RBP_names_2)
# Show RBD status
RBD_stat_non_RBP_2 <- HS_non_RBPs[ ,c("Entry_Name.x", "RBD_status")]
row.names(RBD_stat_non_RBP_2) <- HS_non_RBPs$Entry_Name.x
RBD_stat_non_RBP_t_2 <- RBD_stat_non_RBP_2[rownames(RBD_stat_non_RBP_2) %in% False_RBP_names_2, ]
# Quantify RBD status
RBD_true_prot_df_2 <- RBD_stat_non_RBP_t_2[RBD_stat_non_RBP_t_2$RBD_status == "RBD", ]
RBD_true_prot_names_2 <- rownames(RBD_true_prot_df_2)
length(RBD_true_prot_names_2)
# True RBP
Match_RBP_1 <- HS_RBPs$Entry_Name.x %in% row_1
True_RBP_pos_1 <- which(Match_RBP_1 == TRUE)
True_RBP_names_1 <- HS_RBPs$Entry_Name.x[True_RBP_pos_1]
length(True_RBP_names_1)
# False RBP
Match_non_RBP_1 <- HS_non_RBPs$Entry_Name.x %in% row_1
False_RBP_pos_1 <- which(Match_non_RBP_1 == TRUE)
False_RBP_names_1 <- HS_non_RBPs$Entry_Name.x[False_RBP_pos_1]
length(False_RBP_names_1)
# Show RBD status
RBD_stat_non_RBP<- HS_non_RBPs[ ,c("Entry_Name.x", "RBD_status")]
row.names(RBD_stat_non_RBP) <- HS_non_RBPs$Entry_Name.x
RBD_stat_non_RBP_t_1 <- RBD_stat_non_RBP[rownames(RBD_stat_non_RBP) %in% False_RBP_names_1, ]
RBD_stat_non_RBP_t_1
# Quantify RBD status
RBD_true_prot_df_1 <- RBD_stat_non_RBP_t_1[RBD_stat_non_RBP_t_1$RBD_status == "RBD", ]
RBD_true_prot_names_1 <- rownames(RBD_true_prot_df_1)
length(RBD_true_prot_names_1)
RBD_true_prot_names_1 == RBD_true_prot_names_2
# >1 x-shift
( length(True_RBP_names_1) / nrow(abs_max_both_x_y_1) ) * 100 # True positive quote
( length(False_RBP_names_1) / nrow(abs_max_both_x_y_1) ) * 100 # False positive quote
# >2 x-shift
( length(True_RBP_names_2) / nrow(abs_max_both_x_y_2) ) * 100 # True positive quote
( length(False_RBP_names_2) / nrow(abs_max_both_x_y_2) ) * 100 # False positive quote
#rm(abs_max_both_F, abs_max_both_t, F_ctrl_norm, F_FALSE_ctrl, F_FALSE_RNase, F_NA_ctrl, F_NA_RNase, F_RNase_norm,p_value_df_t, p_value_matrix_t, t_ctrl_norm, t_FALSE_ctrl, t_FALSE_RNase, t_NA_ctrl, t_NA_RNase, t_RNase_norm, p_value_matrix, result)
#rm(HeLa_cleaned, HeLa_cleaned_NA)
library(corrplot)# Clustering
library(cluster)
library(factoextra)
quoti <- function(data1, data2){
Quotienten = c()
for (k in 1:7081) {
dat1 = data1[k,]
dat2 = data2[k,]
Quotient = c()
for (i in 1:25) {
if (dat2[i] == 0)  { quotient <- 0 }
else quotient <- dat1[i]/dat2[i]
Quotient = c(Quotient, quotient)
}
Quotienten = rbind(Quotienten, Quotient)
}
rownames(Quotienten) = rownames( data1)
return(Quotienten)
}
#Here we checked the quotient sum value of each protein and selected only thos above 20 (random value), as those above 20 seem to contain many RBP's (comparison to RDeep database).
quotienten_HeLa_RNAse <- quoti(HeLa_RNAse_mean, HeLa_Ctrl_mean)
q_HeLa_mat <- matrix(unlist(quotienten_HeLa_RNAse), ncol=25, byrow=FALSE)
q_mat_sums <- rowSums(q_HeLa_mat, na.rm=TRUE)
maxi_RNAse <- apply(q_HeLa_mat,1, max)
mini_RNAse <- apply(q_HeLa_mat, 1, min)
mean <- rowMeans(q_HeLa_mat)
x_abs <- abs(x_shifts)
mini2 <- c()
for (i in 1:7081) {
if (mini_RNAse[i] == 0){ mini2[i] <- 0
} else {mini2[i] <- 1/mini_RNAse[i]}
}
abs_mat_both_q <- cbind(abs_max_both, maxi_RNAse, mini_RNAse, mean,q_mat_sums,mini2)
dif <- abs_mat_both_q$maxi_RNAse - abs_mat_both_q$mini_RNAse
abs_mat_both_q <- cbind(abs_mat_both_q, dif,x_abs)
cluster_data <- data.frame(maxi_RNAse, mini2)
library(factoextra)
fviz_nbclust(cluster_data, kmeans, method='silhouette')
kmeans_fancy <- kmeans(scale(cluster_data), 2, nstart = 25)
kmeans_fancy
# plot the clusters
fviz_cluster(kmeans_fancy, data = scale(cluster_data), geom = c("point"),ellipse.type = "euclid")
shiftsafe <- proteinnames[which(kmeans_fancy$cluster==1)]
sil <- silhouette(kmeans_fancy$cluster, dist(cluster_data))
fviz_silhouette(sil)
library(ggplot2)
library(ggpubr)
library(readxl)
library(FactoMineR)
library(ggplot2)
cluster1a <- as.matrix(abs_mat_both_q$fracs_ctrl[left_shift])
cluster1b <- as.matrix(abs_mat_both_q$fracs_RNAse[left_shift])
cluster2a <- as.matrix(abs_mat_both_q$fracs_ctrl[no_shift])
cluster2b <- as.matrix(abs_mat_both_q$fracs_RNAse[no_shift])
cluster3a <- as.matrix(abs_mat_both_q$fracs_ctrl[right_shift])
cluster3b <- as.matrix(abs_mat_both_q$fracs_RNAse[right_shift])
y_axis <- as.matrix(abs_mat_both_q$fracs_ctrl)
x_axis <- as.matrix(abs_mat_both_q$fracs_RNAse)
cols <- c(1,3)
p_all <- ggplot(abs_mat_both_q[,cols], aes(x = x_axis, y=y_axis), color = cyl) +
geom_point() +
geom_density_2d(alpha = 0.5)
p0 <- p_all + labs(title = "All proteins")
p0
p_left <- ggplot(abs_mat_both_q[left_shift,cols], aes(x = cluster1a, y=cluster1b))+
geom_point()+
geom_density_2d(alpha = 0.5)
p1 <- p_left + labs(title = "Left shifters")
p1
p_no <- ggplot(abs_mat_both_q[no_shift,cols], aes(x = cluster2a, y=cluster2b)) +
geom_point()+
geom_density_2d(alpha = 0.5)
p2 <- p_no + labs(title = "Non-shifters")
p2
p_right <- ggplot(abs_mat_both_q[right_shift,cols], aes(x = cluster3a, y=cluster3b)) +
geom_point()+
geom_density_2d(alpha = 0.5)
p3 <- p_right + labs(title = "Right shifters")
p3
heatmap(cor(HeLa_Ctrl_mean, HeLa_RNAse_mean))
#über Github laden ist vermutlich keine gute Idee
load("C:/Users/Mirja/Desktop/HS_RBPs.RData")
rm(Fraction1_Ctrl, Fraction1_RNAse, Fraction2_Ctrl, Fraction2_RNAse, Fraction3_Ctrl, Fraction3_RNAse, Fraction4_Ctrl, Fraction4_RNAse, Fraction5_Ctrl, Fraction5_RNAse, Fraction6_Ctrl, Fraction6_RNAse, Fraction7_Ctrl, Fraction7_RNAse, Fraction8_Ctrl, Fraction8_RNAse, Fraction9_Ctrl, Fraction9_RNAse, Fraction10_Ctrl, Fraction10_RNAse, Fraction11_Ctrl, Fraction11_RNAse, Fraction12_Ctrl, Fraction12_RNAse, Fraction13_Ctrl, Fraction13_RNAse, Fraction14_Ctrl, Fraction14_RNAse, Fraction15_Ctrl, Fraction15_RNAse, Fraction16_Ctrl, Fraction16_RNAse, Fraction17_Ctrl, Fraction17_RNAse, Fraction18_Ctrl, Fraction18_RNAse, Fraction19_Ctrl, Fraction19_RNAse, Fraction20_Ctrl, Fraction20_RNAse, Fraction21_Ctrl, Fraction21_RNAse, Fraction22_Ctrl, Fraction22_RNAse, Fraction23_Ctrl, Fraction23_RNAse, Fraction24_Ctrl, Fraction24_RNAse, Fraction25_Ctrl, Fraction25_RNAse)
rm(fractions_names_Ctrl_, fractions_names_RNAse,i)
#CProteins
proteinnames <- c(rownames(Raw_data)) # Protein names
#load the data
Raw_data <- read.csv("https://raw.githubusercontent.com/datascience-mobi-2022/2022-topic-03-team-03/3a0f2d9583b56a1cd22150b399d61352d6f7b0e1/RDeeP_HeLa_Interphase.csv", header=TRUE, row.names=1, sep = ";")
#CProteins
proteinnames <- c(rownames(Raw_data)) # Protein names
# if necessary install.packages("tidyverse")
library(tidyverse)
# Control
HeLa_Ctrl = Raw_data %>% select(contains("Ctrl"))
# RNAse
HeLa_RNAse = Raw_data %>% select(contains("RNA"))
# Rows of 0
which(rowMeans(Raw_data) == 0) #nur eine Zeile komplett ohne Werte
which(rowMeans(HeLa_RNAse) == 0) #2 Reihen ohne Werte
which(rowMeans(HeLa_Ctrl) == 0)# 4Reihen ohne Werte
trash <- c(which(rowMeans(HeLa_Ctrl) == 0),which(rowMeans(HeLa_RNAse) == 0))
trash <- trash[-5] #kommt in beiden Reihen vor
#remove failed proteins
HeLa_cleaned <- Raw_data[- trash, ]
HeLa_cleaned_NA <- HeLa_cleaned # make a copy
HeLa_cleaned_NA[HeLa_cleaned_NA == 0] <- NA # Replace 0 with NA
#clean up datasets
# Control
HeLa_Ctrl = HeLa_cleaned %>% select(contains("Ctrl"))
# RNAse
HeLa_RNAse = HeLa_cleaned %>% select(contains("RNA"))
rm(Raw_data)
#Spalten normalisieren
Spalten_Norm <- function(x){
ColSumme = colSums(x)
maxcolsums = c()
k = 3
for (i in 1:(ncol(x)/3)) {
a = ColSumme[[k*i]]
b = ColSumme[[k*i-1]]
c = ColSumme[[k*i-2]]
maxcolsums = c(maxcolsums, max(a,b,c))
}
return(ColSumme)
}
Spalten_Norm_1 <- function(x){
ColSumme = colSums(x)
maxcolsums = c()
k = 3
for (i in 1:(ncol(x)/3)) {
a = ColSumme[[k*i]]
b = ColSumme[[k*i-1]]
c = ColSumme[[k*i-2]]
maxcolsums = c(maxcolsums, max(a,b,c))
}
return(maxcolsums)
}
Spalten_Norm_2 <- function(x, ColSumme, maxcolsums){
Quotient = c()
k = 3
for (i in 1:(ncol(x)/3)){
Quotient = c(Quotient, maxcolsums[i]/ColSumme[[k*i-2]])
Quotient = c(Quotient, maxcolsums[i]/ColSumme[[k*i-1]])
Quotient = c(Quotient, maxcolsums[i]/ColSumme[[k*i]])
}
return(Quotient)
}
#Spalten normalisieren
ColSumme<- Spalten_Norm(HeLa_cleaned)
maxcolsums <- Spalten_Norm_1(HeLa_cleaned)
Quotient <- Spalten_Norm_2(HeLa_cleaned, ColSumme, maxcolsums)
Hela_Col_Norm <- sweep(HeLa_cleaned, 2, Quotient, "*")
rm(Spalten_Norm, Spalten_Norm_1, Spalten_Norm_2)
rm(ColSumme, maxcolsums, Quotient)
# Control
HeLa_Ctrl_colnorm = Hela_Col_Norm %>% select(contains("Ctrl"))
HeLa_Ctrl1 = HeLa_Ctrl_colnorm %>% select(contains("Rep1"))
HeLa_Ctrl2 = HeLa_Ctrl_colnorm %>% select(contains("Rep2"))
HeLa_Ctrl3 = HeLa_Ctrl_colnorm %>% select(contains("Rep3"))
# RNAse
HeLa_RNAse_colnorm = Hela_Col_Norm %>% select(contains("RNA"))
HeLa_RNAse1 = HeLa_RNAse_colnorm %>% select(contains("Rep1"))
HeLa_RNAse2 = HeLa_RNAse_colnorm %>% select(contains("Rep2"))
HeLa_RNAse3 = HeLa_RNAse_colnorm %>% select(contains("Rep3"))
# added if so we get 0 instead of Na if RowSum is 0
rowPercent <- function(dataframe){
dt <- dataframe
lastrow <- dim(dataframe)[1]
for(i in 1:lastrow){
RowSum <- rowSums (dataframe[i,])
if (RowSum == 0) {dt[i,] <- 0}
else dt[i,] <- (dataframe[i,]/RowSum)*100    }
return(dt)}
Norm_HeLa_Ctrl1 <- rowPercent(HeLa_Ctrl1)
Norm_HeLa_Ctrl2 <- rowPercent(HeLa_Ctrl2)
Norm_HeLa_Ctrl3 <- rowPercent(HeLa_Ctrl3)
Norm_HeLa_RNAse1 <- rowPercent(HeLa_RNAse1)
Norm_HeLa_RNAse2 <- rowPercent(HeLa_RNAse2)
Norm_HeLa_RNAse3 <- rowPercent(HeLa_RNAse3)
knitr::opts_chunk$set(echo = TRUE)
# Creating for-loop that substracts fraction of global maxima for ctrl and RNAse for each protein
i <- c(1:7081)
x_shifts <- c()
for(x in i){x_shifts[x] <- fracs_ctrl[x] - fracs_RNAse[x]
}
